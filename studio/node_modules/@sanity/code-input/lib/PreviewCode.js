"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactAce = _interopRequireDefault(require("react-ace"));

var _PreviewCode = _interopRequireDefault(require("./PreviewCode.css"));

require("brace/mode/batchfile");

require("brace/mode/css");

require("brace/mode/html");

require("brace/mode/javascript");

require("brace/mode/json");

require("brace/mode/jsx");

require("brace/mode/markdown");

require("brace/mode/php");

require("brace/mode/sass");

require("brace/mode/scss");

require("brace/mode/python");

require("brace/mode/sh");

require("brace/mode/text");

require("brace/theme/github");

require("brace/theme/monokai");

require("brace/theme/terminal");

require("brace/theme/tomorrow");

require("./groq");

var _config = require("./config");

var _createHighlightMarkers = _interopRequireDefault(require("./createHighlightMarkers"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function isSupportedLanguage(mode) {
  var alias = _config.LANGUAGE_ALIASES[mode];

  if (alias) {
    return alias;
  }

  var isSupported = _config.SUPPORTED_LANGUAGES.find(lang => lang.value === mode);

  if (isSupported) {
    return mode;
  }

  return false;
}

class PreviewCode extends _react.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "ace", /*#__PURE__*/_react.default.createRef());
  }

  componentDidMount() {
    // Avoid cursor and focus tracking by Ace
    var ace = this.ace && this.ace.current;

    if (ace) {
      ace.editor.renderer.$cursorLayer.element.style.opacity = 0;
      ace.editor.textInput.getElement().disabled = true;
    }
  }

  render() {
    var _this$props = this.props,
        value = _this$props.value,
        type = _this$props.type;
    var fixedLanguage = (0, _get2.default)(type, 'options.language');
    var mode = isSupportedLanguage(value && value.language || fixedLanguage) || 'text';
    return /*#__PURE__*/_react.default.createElement("div", {
      className: _PreviewCode.default.root
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _PreviewCode.default.aceWrapper
    }, /*#__PURE__*/_react.default.createElement(_reactAce.default, {
      ref: this.ace,
      focus: false,
      mode: mode,
      theme: "monokai",
      width: "100%",
      onChange: () => undefined,
      height: null,
      maxLines: 200,
      readOnly: true,
      wrapEnabled: true,
      showPrintMargin: false,
      highlightActiveLine: false,
      cursorStart: -1,
      value: value && value.code || '',
      markers: value && value.highlightedLines ? (0, _createHighlightMarkers.default)(value.highlightedLines) : null,
      onLoad: this.handleEditorLoad,
      tabSize: 2,
      showGutter: false,
      setOptions: _config.ACE_SET_OPTIONS,
      editorProps: _config.ACE_EDITOR_PROPS
    })));
  }

}

exports.default = PreviewCode;

_defineProperty(PreviewCode, "propTypes", {
  type: _propTypes.default.object,
  value: _propTypes.default.shape({
    _type: _propTypes.default.string,
    code: _propTypes.default.string,
    language: _propTypes.default.string,
    highlightedLines: _propTypes.default.array
  })
});