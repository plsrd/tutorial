"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _has2 = _interopRequireDefault(require("lodash/has"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactAce = _interopRequireDefault(require("react-ace"));

var _patchEvent = require("part:@sanity/form-builder/patch-event");

var _default = _interopRequireDefault(require("part:@sanity/components/formfields/default"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/fieldsets/default"));

var _default3 = _interopRequireDefault(require("part:@sanity/components/selects/default"));

var _default4 = _interopRequireDefault(require("part:@sanity/components/textinputs/default"));

var _createHighlightMarkers = _interopRequireDefault(require("./createHighlightMarkers"));

var _CodeInput = _interopRequireDefault(require("./CodeInput.css"));

var _config = require("./config");

require("brace/mode/batchfile");

require("brace/mode/css");

require("brace/mode/html");

require("brace/mode/typescript");

require("brace/mode/javascript");

require("brace/mode/json");

require("brace/mode/jsx");

require("brace/mode/markdown");

require("brace/mode/php");

require("brace/mode/sass");

require("brace/mode/scss");

require("brace/mode/python");

require("brace/mode/sh");

require("brace/mode/text");

require("./groq");

require("brace/theme/github");

require("brace/theme/monokai");

require("brace/theme/terminal");

require("brace/theme/tomorrow");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-enable import/no-unassigned-import */
function compareNumbers(numA, numB) {
  return numA - numB;
} // Returns a string with the mode name if supported (because aliases), otherwise false


function isSupportedLanguage(mode) {
  var alias = _config.LANGUAGE_ALIASES[mode];

  if (alias) {
    return alias;
  }

  var isSupported = _config.SUPPORTED_LANGUAGES.find(lang => lang.value === mode);

  if (isSupported) {
    return mode;
  }

  return false;
}

class CodeInput extends _react.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleCodeChange", code => {
      var _this$props = this.props,
          type = _this$props.type,
          onChange = _this$props.onChange;
      var path = ['code'];
      var fixedLanguage = (0, _get2.default)(type, 'options.language');
      onChange(_patchEvent.PatchEvent.from([(0, _patchEvent.setIfMissing)({
        _type: type.name,
        language: fixedLanguage
      }), code ? (0, _patchEvent.set)(code, path) : (0, _patchEvent.unset)(path)]));
    });

    _defineProperty(this, "handleToggleSelectLine", lineNumber => {
      var _this$props2 = this.props,
          type = _this$props2.type,
          onChange = _this$props2.onChange,
          value = _this$props2.value;
      var path = ['highlightedLines'];
      var highlightedLines = value && value.highlightedLines || [];
      var position = highlightedLines.indexOf(lineNumber);
      var patches = [(0, _patchEvent.setIfMissing)({
        _type: type.name
      }), (0, _patchEvent.setIfMissing)([], ['highlightedLines'])];
      var addLine = position === -1;

      if (addLine) {
        // New element, figure out where to add it so it sorts correctly
        var sorted = highlightedLines.concat(lineNumber).sort(compareNumbers);
        position = sorted.indexOf(lineNumber);
        patches.push((0, _patchEvent.insert)([lineNumber], 'before', path.concat(position === sorted.length - 1 ? -1 : position)));
      } else if (highlightedLines.length === 1) {
        // Last element removed, unset whole path
        patches.push((0, _patchEvent.unset)(path)); // Temporary workaround for bug in react-ace
        // (https://github.com/securingsincity/react-ace/issues/229)

        var editor = this.editor // Remove all markers from editor
        ;
        [true, false].forEach(inFront => {
          var currentMarkers = editor.getSession().getMarkers(inFront);
          Object.keys(currentMarkers).forEach(marker => {
            editor.getSession().removeMarker(currentMarkers[marker].id);
          });
        });
      } else {
        // Removed, but not the last element, remove single item
        patches.push((0, _patchEvent.unset)(path.concat(position)));
      }

      onChange(_patchEvent.PatchEvent.from(patches));
    });

    _defineProperty(this, "handleGutterMouseDown", event => {
      var target = event.domEvent.target;

      if (target.classList.contains('ace_gutter-cell')) {
        var row = event.getDocumentPosition().row;
        this.handleToggleSelectLine(row + 1); // Ace starts at row 0
      }
    });

    _defineProperty(this, "handleEditorLoad", editor => {
      this.editor = editor;
      this.editor.focus();
      this.editor.on('guttermousedown', this.handleGutterMouseDown);
    });

    _defineProperty(this, "handleLanguageChange", item => {
      var _this$props3 = this.props,
          type = _this$props3.type,
          onChange = _this$props3.onChange;
      var path = ['language'];
      onChange(_patchEvent.PatchEvent.from([(0, _patchEvent.setIfMissing)({
        _type: type.name
      }), item ? (0, _patchEvent.set)(item.value, path) : (0, _patchEvent.unset)(path)]));
    });

    _defineProperty(this, "handleFilenameChange", item => {
      var _this$props4 = this.props,
          type = _this$props4.type,
          onChange = _this$props4.onChange;
      var path = ['filename'];
      onChange(_patchEvent.PatchEvent.from([(0, _patchEvent.setIfMissing)({
        _type: type.name
      }), item ? (0, _patchEvent.set)(item.target.value, path) : (0, _patchEvent.unset)(path)]));
    });

    _defineProperty(this, "renderEditor", () => {
      // console.log('CodeInput', this.props)
      var _this$props5 = this.props,
          readOnly = _this$props5.readOnly,
          value = _this$props5.value,
          type = _this$props5.type;
      var fixedLanguage = (0, _get2.default)(type, 'options.language');
      var mode = isSupportedLanguage(value && value.language || fixedLanguage) || 'text';
      return /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)(_CodeInput.default.aceEditorContainer, readOnly && _CodeInput.default.readOnly)
      }, /*#__PURE__*/_react.default.createElement(_reactAce.default, {
        className: _CodeInput.default.aceEditor,
        mode: mode,
        theme: this.getTheme(),
        width: "100%",
        onChange: this.handleCodeChange,
        name: "".concat(this._inputId, "__aceEditor"),
        value: value && value.code || '',
        markers: value && value.highlightedLines ? (0, _createHighlightMarkers.default)(value.highlightedLines) : null,
        onLoad: this.handleEditorLoad,
        readOnly: readOnly,
        tabSize: 2,
        wrapEnabled: true,
        setOptions: _config.ACE_SET_OPTIONS,
        editorProps: _config.ACE_EDITOR_PROPS
      }));
    });
  }

  focus() {
    this.editor.focus();
  }

  componentWillUnmount() {
    this.editor.removeListener('guttermousedown', this.handleGutterMouseDown);
  }

  getLanguageAlternatives() {
    var languageAlternatives = (0, _get2.default)(this.props.type, 'options.languageAlternatives');

    if (!languageAlternatives) {
      return _config.SUPPORTED_LANGUAGES;
    }

    if (!Array.isArray(languageAlternatives)) {
      throw new Error("'options.languageAlternatives' should be an array, got ".concat(typeof languageAlternatives));
    }

    return languageAlternatives.reduce((acc, _ref) => {
      var title = _ref.title,
          value = _ref.value;
      var alias = _config.LANGUAGE_ALIASES[value];

      if (alias) {
        // eslint-disable-next-line no-console
        console.warn("'options.languageAlternatives' lists a language with value \"%s\", which is an alias of \"%s\" - please replace the value to read \"%s\"", value, alias, alias);
        return acc.concat({
          title,
          value: alias
        });
      }

      if (!_config.SUPPORTED_LANGUAGES.find(lang => lang.value === value)) {
        // eslint-disable-next-line no-console
        console.warn("'options.languageAlternatives' lists a language which is not supported: \"%s\", syntax highlighting will be disabled.", value);
      }

      return acc.concat({
        title,
        value
      });
    }, []);
  }

  getTheme() {
    var preferredTheme = (0, _get2.default)(this.props.type, 'options.theme');
    return preferredTheme && _config.SUPPORTED_THEMES.find(theme => theme === preferredTheme) ? preferredTheme : _config.DEFAULT_THEME;
  }

  render() {
    var _this$props6 = this.props,
        value = _this$props6.value,
        type = _this$props6.type,
        level = _this$props6.level,
        readOnly = _this$props6.readOnly;
    var languages = this.getLanguageAlternatives().slice();

    if ((0, _has2.default)(type, 'options.language')) {
      return /*#__PURE__*/_react.default.createElement(_default2.default, {
        legend: type.title,
        description: type.description,
        level: level
      }, this.renderEditor());
    }

    var selectedLanguage = value && value.language ? languages.find(item => item.value === value.language) : undefined;

    if (!selectedLanguage) {
      languages.unshift({
        title: 'Select language'
      });
    }

    var languageField = type.fields.find(field => field.name === 'language');
    var filenameField = type.fields.find(field => field.name === 'filename');
    return /*#__PURE__*/_react.default.createElement(_default2.default, {
      legend: type.title,
      description: type.description,
      level: level
    }, /*#__PURE__*/_react.default.createElement(_default.default, {
      level: level + 1,
      label: languageField.type.title
    }, /*#__PURE__*/_react.default.createElement(_default3.default, {
      onChange: this.handleLanguageChange,
      value: selectedLanguage,
      items: languages,
      readOnly: readOnly
    })), (0, _get2.default)(type, 'options.withFilename', false) && /*#__PURE__*/_react.default.createElement(_default.default, {
      label: filenameField.title || 'Filename',
      level: level + 1
    }, /*#__PURE__*/_react.default.createElement(_default4.default, {
      type: "text",
      name: "filename",
      value: value.filename,
      placeholder: filenameField.placeholder,
      onChange: this.handleFilenameChange
    })), /*#__PURE__*/_react.default.createElement(_default.default, {
      label: selectedLanguage && selectedLanguage.title || 'Code',
      level: level + 1
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _CodeInput.default.editorContainer
    }, this.renderEditor())));
  }

}

exports.default = CodeInput;

_defineProperty(CodeInput, "propTypes", {
  level: _propTypes.default.number.isRequired,
  value: _propTypes.default.shape({
    _type: _propTypes.default.string,
    code: _propTypes.default.string,
    filename: _propTypes.default.string,
    language: _propTypes.default.string,
    highlightedLines: _propTypes.default.array
  }),
  type: _propTypes.default.shape({
    name: _propTypes.default.string,
    title: _propTypes.default.string,
    description: _propTypes.default.string,
    fields: _propTypes.default.arrayOf(_propTypes.default.shape({
      name: _propTypes.default.string.isRequired
    }))
  }).isRequired,
  onChange: _propTypes.default.func,
  readOnly: _propTypes.default.bool
});

_defineProperty(CodeInput, "defaultProps", {
  onChange: () => undefined,
  value: undefined,
  readOnly: false
});